/*! tableau-2.2.1 */
(function() {
    /*! BEGIN MscorlibSlim */
    var global = {};
    (function(global) {
        "use strict";
        var ss = {
            __assemblies: {}
        };
        ss.initAssembly = function assembly(obj, name, res) {
            res = res || {};
            obj.name = name;
            obj.toString = function() {
                return this.name
            };
            obj.__types = {};
            obj.getResourceNames = function() {
                return Object.keys(res)
            };
            obj.getResourceDataBase64 = function(name) {
                return res[name] || null
            };
            obj.getResourceData = function(name) {
                var r = res[name];
                return r ? ss.dec64(r) : null
            };
            ss.__assemblies[name] = obj
        };
        ss.initAssembly(ss, 'mscorlib');
        ss.getAssemblies = function ss$getAssemblies() {
            return Object.keys(ss.__assemblies).map(function(n) {
                return ss.__assemblies[n]
            })
        };
        ss.isNullOrUndefined = function ss$isNullOrUndefined(o) {
            return (o === null) || (o === undefined)
        };
        ss.isValue = function ss$isValue(o) {
            return (o !== null) && (o !== undefined)
        };
        ss.referenceEquals = function ss$referenceEquals(a, b) {
            return ss.isValue(a) ? a === b : !ss.isValue(b)
        };
        ss.mkdict = function ss$mkdict() {
            var a = (arguments.length != 1 ? arguments : arguments[0]);
            var r = {};
            for (var i = 0; i < a.length; i += 2) {
                r[a[i]] = a[i + 1]
            }
            return r
        };
        ss.clone = function ss$clone(t, o) {
            return o ? t.$clone(o) : o
        };
        ss.coalesce = function ss$coalesce(a, b) {
            return ss.isValue(a) ? a : b
        };
        ss.isDate = function ss$isDate(obj) {
            return Object.prototype.toString.call(obj) === '[object Date]'
        };
        ss.isArray = function ss$isArray(obj) {
            return Object.prototype.toString.call(obj) === '[object Array]'
        };
        ss.isTypedArrayType = function ss$isTypedArrayType(type) {
            return ['Float32Array', 'Float64Array', 'Int8Array', 'Int16Array', 'Int32Array', 'Uint8Array', 'Uint16Array', 'Uint32Array', 'Uint8ClampedArray'].indexOf(ss.getTypeFullName(type)) >= 0
        };
        ss.isArrayOrTypedArray = function ss$isArray(obj) {
            return ss.isArray(obj) || ss.isTypedArrayType(ss.getInstanceType(obj))
        };
        ss.getHashCode = function ss$getHashCode(obj) {
            if (!ss.isValue(obj)) throw new ss_NullReferenceException('Cannot get hash code of null');
            else if (typeof(obj.getHashCode) === 'function') return obj.getHashCode();
            else if (typeof(obj) === 'boolean') {
                return obj ? 1 : 0
            } else if (typeof(obj) === 'number') {
                var s = obj.toExponential();
                s = s.substr(0, s.indexOf('e'));
                return parseInt(s.replace('.', ''), 10) & 0xffffffff
            } else if (typeof(obj) === 'string') {
                var res = 0;
                for (var i = 0; i < obj.length; i++) res = (res * 31 + obj.charCodeAt(i)) & 0xffffffff;
                return res
            } else if (ss.isDate(obj)) {
                return obj.valueOf() & 0xffffffff
            } else {
                return ss.defaultHashCode(obj)
            }
        };
        ss.defaultHashCode = function ss$defaultHashCode(obj) {
            return obj.$__hashCode__ || (obj.$__hashCode__ = (Math.random() * 0x100000000) | 0)
        };
        ss.equals = function ss$equals(a, b) {
            if (!ss.isValue(a)) throw new ss_NullReferenceException('Object is null');
            else if (a !== ss && typeof(a.equals) === 'function') return a.equals(b);
            if (ss.isDate(a) && ss.isDate(b)) return a.valueOf() === b.valueOf();
            else if (typeof(a) === 'function' && typeof(b) === 'function') return ss.delegateEquals(a, b);
            else if (ss.isNullOrUndefined(a) && ss.isNullOrUndefined(b)) return true;
            else return a === b
        };
        ss.compare = function ss$compare(a, b) {
            if (!ss.isValue(a)) throw new ss_NullReferenceException('Object is null');
            else if (typeof(a) === 'number' || typeof(a) === 'string' || typeof(a) === 'boolean') return a < b ? -1 : (a > b ? 1 : 0);
            else if (ss.isDate(a)) return ss.compare(a.valueOf(), b.valueOf());
            else return a.compareTo(b)
        };
        ss.equalsT = function ss$equalsT(a, b) {
            if (!ss.isValue(a)) throw new ss_NullReferenceException('Object is null');
            else if (typeof(a) === 'number' || typeof(a) === 'string' || typeof(a) === 'boolean') return a === b;
            else if (ss.isDate(a)) return a.valueOf() === b.valueOf();
            else return a.equalsT(b)
        };
        ss.staticEquals = function ss$staticEquals(a, b) {
            if (!ss.isValue(a)) return !ss.isValue(b);
            else return ss.isValue(b) ? ss.equals(a, b) : false
        };
        ss.shallowCopy = function ss$shallowCopy(source, target) {
            var keys = Object.keys(source);
            for (var i = 0, l = keys.length; i < l; i++) {
                var k = keys[i];
                target[k] = source[k]
            }
        };
        ss.isLower = function ss$isLower(c) {
            var s = String.fromCharCode(c);
            return s === s.toLowerCase() && s !== s.toUpperCase()
        };
        ss.isUpper = function ss$isUpper(c) {
            var s = String.fromCharCode(c);
            return s !== s.toLowerCase() && s === s.toUpperCase()
        };
        if (typeof(window) == 'object') {
            if (!window.Element) {
                window.Element = function() {};
                window.Element.isInstanceOfType = function(instance) {
                    return instance && typeof instance.constructor === 'undefined' && typeof instance.tagName === 'string'
                }
            }
            window.Element.__typeName = 'Element'
        }
        ss.clearKeys = function ss$clearKeys(d) {
            for (var n in d) {
                if (d.hasOwnProperty(n)) delete d[n]
            }
        };
        ss.keyExists = function ss$keyExists(d, key) {
            return d[key] !== undefined
        };
        if (!Object.keys) {
            Object.keys = (function() {
                var hasOwnProperty = Object.prototype.hasOwnProperty,
                    hasDontEnumBug = !({
                        toString: null
                    }).propertyIsEnumerable('toString'),
                    dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
                    dontEnumsLength = dontEnums.length;
                return function(obj) {
                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
                        throw new TypeError('Object.keys called on non-object')
                    }
                    var result = [],
                        prop, i;
                    for (prop in obj) {
                        if (hasOwnProperty.call(obj, prop)) {
                            result.push(prop)
                        }
                    }
                    if (hasDontEnumBug) {
                        for (i = 0; i < dontEnumsLength; i++) {
                            if (hasOwnProperty.call(obj, dontEnums[i])) {
                                result.push(dontEnums[i])
                            }
                        }
                    }
                    return result
                }
            }())
        }
        ss.getKeyCount = function ss$getKeyCount(d) {
            return Object.keys(d).length
        };
        ss.__genericCache = {};
        ss._makeGenericTypeName = function ss$_makeGenericTypeName(genericType, typeArguments) {
            var result = genericType.__typeName;
            for (var i = 0; i < typeArguments.length; i++) result += (i === 0 ? '[' : ',') + '[' + ss.getTypeQName(typeArguments[i]) + ']';
            result += ']';
            return result
        };
        ss.makeGenericType = function ss$makeGenericType(genericType, typeArguments) {
            var name = ss._makeGenericTypeName(genericType, typeArguments);
            return ss.__genericCache[name] || genericType.apply(null, typeArguments)
        };
        ss.registerGenericClassInstance = function ss$registerGenericClassInstance(instance, genericType, typeArguments, members, baseType, interfaceTypes) {
            var name = ss._makeGenericTypeName(genericType, typeArguments);
            ss.__genericCache[name] = instance;
            instance.__typeName = name;
            instance.__genericTypeDefinition = genericType;
            instance.__typeArguments = typeArguments;
            ss.initClass(instance, genericType.__assembly, members, baseType(), interfaceTypes())
        };
        ss.registerGenericInterfaceInstance = function ss$registerGenericInterfaceInstance(instance, genericType, typeArguments, members, baseInterfaces) {
            var name = ss._makeGenericTypeName(genericType, typeArguments);
            ss.__genericCache[name] = instance;
            instance.__typeName = name;
            instance.__genericTypeDefinition = genericType;
            instance.__typeArguments = typeArguments;
            ss.initInterface(instance, genericType.__assembly, members, baseInterfaces())
        };
        ss.isGenericTypeDefinition = function ss$isGenericTypeDefinition(type) {
            return type.__isGenericTypeDefinition || false
        };
        ss.getGenericTypeDefinition = function ss$getGenericTypeDefinition(type) {
            return type.__genericTypeDefinition || null
        };
        ss.getGenericParameterCount = function ss$getGenericParameterCount(type) {
            return type.__typeArgumentCount || 0
        };
        ss.getGenericArguments = function ss$getGenericArguments(type) {
            return type.__typeArguments || null
        };
        ss.setMetadata = function ss$_setMetadata(type, metadata) {
            if (metadata.members) {
                for (var i = 0; i < metadata.members.length; i++) {
                    var m = metadata.members[i];
                    m.typeDef = type;
                    if (m.adder) m.adder.typeDef = type;
                    if (m.remover) m.remover.typeDef = type;
                    if (m.getter) m.getter.typeDef = type;
                    if (m.setter) m.setter.typeDef = type
                }
            }
            type.__metadata = metadata;
            if (metadata.variance) {
                type.isAssignableFrom = function(source) {
                    var check = function(target, type) {
                        if (type.__genericTypeDefinition === target.__genericTypeDefinition && type.__typeArguments.length == target.__typeArguments.length) {
                            for (var i = 0; i < target.__typeArguments.length; i++) {
                                var v = target.__metadata.variance[i],
                                    t = target.__typeArguments[i],
                                    s = type.__typeArguments[i];
                                switch (v) {
                                    case 1:
                                        if (!ss.isAssignableFrom(t, s)) return false;
                                        break;
                                    case 2:
                                        if (!ss.isAssignableFrom(s, t)) return false;
                                        break;
                                    default:
                                        if (s !== t) return false
                                }
                            }
                            return true
                        }
                        return false
                    };
                    if (source.__interface && check(this, source)) return true;
                    var ifs = ss.getInterfaces(source);
                    for (var i = 0; i < ifs.length; i++) {
                        if (ifs[i] === this || check(this, ifs[i])) return true
                    }
                    return false
                }
            }
        };
        ss.setMetadata = function ss$_setMetadata(type, metadata) {};
        ss.initClass = function ss$initClass(ctor, asm, members, baseType, interfaces) {
            ctor.__class = true;
            ctor.__assembly = asm;
            if (!ctor.__typeArguments) asm.__types[ctor.__typeName] = ctor;
            if (baseType && baseType !== Object) {
                var f = function() {};
                f.prototype = baseType.prototype;
                ctor.prototype = new f;
                ctor.prototype.constructor = ctor
            }
            ss.shallowCopy(members, ctor.prototype);
            if (interfaces) ctor.__interfaces = interfaces
        };
        ss.initGenericClass = function ss$initGenericClass(ctor, asm, typeArgumentCount) {
            ctor.__class = true;
            ctor.__assembly = asm;
            asm.__types[ctor.__typeName] = ctor;
            ctor.__typeArgumentCount = typeArgumentCount;
            ctor.__isGenericTypeDefinition = true
        };
        ss.initInterface = function ss$initInterface(ctor, asm, members, baseInterfaces) {
            ctor.__interface = true;
            ctor.__assembly = asm;
            if (!ctor.__typeArguments) asm.__types[ctor.__typeName] = ctor;
            if (baseInterfaces) ctor.__interfaces = baseInterfaces;
            ss.shallowCopy(members, ctor.prototype);
            ctor.isAssignableFrom = function(type) {
                return ss.contains(ss.getInterfaces(type), this)
            }
        };
        ss.initGenericInterface = function ss$initGenericClass(ctor, asm, typeArgumentCount) {
            ctor.__interface = true;
            ctor.__assembly = asm;
            asm.__types[ctor.__typeName] = ctor;
            ctor.__typeArgumentCount = typeArgumentCount;
            ctor.__isGenericTypeDefinition = true
        };
        ss.initEnum = function ss$initEnum(ctor, asm, members, namedValues) {
            ctor.__enum = true;
            ctor.__assembly = asm;
            asm.__types[ctor.__typeName] = ctor;
            ss.shallowCopy(members, ctor.prototype);
            ctor.getDefaultValue = ctor.createInstance = function() {
                return namedValues ? null : 0
            };
            ctor.isInstanceOfType = function(instance) {
                return typeof(instance) == (namedValues ? 'string' : 'number')
            }
        };
        ss.getBaseType = function ss$getBaseType(type) {
            if (type === Object || type.__interface) {
                return null
            } else if (Object.getPrototypeOf) {
                return Object.getPrototypeOf(type.prototype).constructor
            } else {
                var p = type.prototype;
                if (Object.prototype.hasOwnProperty.call(p, 'constructor')) {
                    try {
                        var ownValue = p.constructor;
                        delete p.constructor;
                        return p.constructor
                    } finally {
                        p.constructor = ownValue
                    }
                }
                return p.constructor
            }
        };
        ss.getTypeFullName = function ss$getTypeFullName(type) {
            return type.__typeName || type.name || (type.toString().match(/^\s*function\s*([^\s(]+)/) || [])[1] || 'Object'
        };
        ss.getTypeQName = function ss$getTypeFullName(type) {
            return ss.getTypeFullName(type) + (type.__assembly ? ', ' + type.__assembly.name : '')
        };
        ss.getTypeName = function ss$getTypeName(type) {
            var fullName = ss.getTypeFullName(type);
            var bIndex = fullName.indexOf('[');
            var nsIndex = fullName.lastIndexOf('.', bIndex >= 0 ? bIndex : fullName.length);
            return nsIndex > 0 ? fullName.substr(nsIndex + 1) : fullName
        };
        ss.getTypeNamespace = function ss$getTypeNamespace(type) {
            var fullName = ss.getTypeFullName(type);
            var bIndex = fullName.indexOf('[');
            var nsIndex = fullName.lastIndexOf('.', bIndex >= 0 ? bIndex : fullName.length);
            return nsIndex > 0 ? fullName.substr(0, nsIndex) : ''
        };
        ss.getTypeAssembly = function ss$getTypeAssembly(type) {
            if (ss.contains([Date, Number, Boolean, String, Function, Array], type)) return ss;
            else return type.__assembly || null
        };
        ss._getAssemblyType = function ss$_getAssemblyType(asm, name) {
            var result = [];
            if (asm.__types) {
                return asm.__types[name] || null
            } else {
                var a = name.split('.');
                for (var i = 0; i < a.length; i++) {
                    asm = asm[a[i]];
                    if (!ss.isValue(asm)) return null
                }
                if (typeof asm !== 'function') return null;
                return asm
            }
        };
        ss.getAssemblyTypes = function ss$getAssemblyTypes(asm) {
            var result = [];
            if (asm.__types) {
                for (var t in asm.__types) {
                    if (asm.__types.hasOwnProperty(t)) result.push(asm.__types[t])
                }
            } else {
                var traverse = function(s, n) {
                    for (var c in s) {
                        if (s.hasOwnProperty(c)) traverse(s[c], c)
                    }
                    if (typeof(s) === 'function' && ss.isUpper(n.charCodeAt(0))) result.push(s)
                };
                traverse(asm, '')
            }
            return result
        };
        ss.createAssemblyInstance = function ss$createAssemblyInstance(asm, typeName) {
            var t = ss.getType(typeName, asm);
            return t ? ss.createInstance(t) : null
        };
        ss.getInterfaces = function ss$getInterfaces(type) {
            if (type.__interfaces) return type.__interfaces;
            else if (type === Date || type === Number) return [ss_IEquatable, ss_IComparable, ss_IFormattable];
            else if (type === Boolean || type === String) return [ss_IEquatable, ss_IComparable];
            else if (type === Array || ss.isTypedArrayType(type)) return [ss_IEnumerable, ss_ICollection, ss_IList];
            else return []
        };
        ss.isInstanceOfType = function ss$isInstanceOfType(instance, type) {
            if (ss.isNullOrUndefined(instance)) return false;
            if (typeof(type.isInstanceOfType) === 'function') return type.isInstanceOfType(instance);
            return ss.isAssignableFrom(type, ss.getInstanceType(instance))
        };
        ss.isAssignableFrom = function ss$isAssignableFrom(target, type) {
            return target === type || (typeof(target.isAssignableFrom) === 'function' && target.isAssignableFrom(type)) || type.prototype instanceof target
        };
        ss.isClass = function Type$isClass(type) {
            return (type.__class == true || type === Array || type === Function || type === RegExp || type === String || type === Error || type === Object)
        };
        ss.isEnum = function Type$isEnum(type) {
            return !!type.__enum
        };
        ss.isFlags = function Type$isFlags(type) {
            return type.__metadata && type.__metadata.enumFlags || false
        };
        ss.isInterface = function Type$isInterface(type) {
            return !!type.__interface
        };
        ss.safeCast = function ss$safeCast(instance, type) {
            if (type === true) return instance;
            else if (type === false) return null;
            else return ss.isInstanceOfType(instance, type) ? instance : null
        };
        ss.cast = function ss$cast(instance, type) {
            if (instance === null || typeof(instance) === 'undefined') return instance;
            else if (type === true || (type !== false && ss.isInstanceOfType(instance, type))) return instance;
            throw new ss_InvalidCastException('Cannot cast object to type ' + ss.getTypeFullName(type))
        };
        ss.getInstanceType = function ss$getInstanceType(instance) {
            if (!ss.isValue(instance)) throw new ss_NullReferenceException('Cannot get type of null');
            try {
                return instance.constructor
            } catch (ex) {
                return Object
            }
        };
        ss._getType = function(typeName, asm, re) {
            var outer = !re;
            re = re || /[[,\]]/g;
            var last = re.lastIndex,
                m = re.exec(typeName),
                tname, targs = [];
            if (m) {
                tname = typeName.substring(last, m.index);
                switch (m[0]) {
                    case '[':
                        if (typeName[m.index + 1] != '[') return null;
                        for (;;) {
                            re.exec(typeName);
                            var t = ss._getType(typeName, global, re);
                            if (!t) return null;
                            targs.push(t);
                            m = re.exec(typeName);
                            if (m[0] === ']') break;
                            else if (m[0] !== ',') return null
                        }
                        m = re.exec(typeName);
                        if (m && m[0] === ',') {
                            re.exec(typeName);
                            if (!(asm = ss.__assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()])) return null
                        }
                        break;
                    case ']':
                        break;
                    case ',':
                        re.exec(typeName);
                        if (!(asm = ss.__assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()])) return null;
                        break
                }
            } else {
                tname = typeName.substring(last)
            }
            if (outer && re.lastIndex) return null;
            var t = ss._getAssemblyType(asm, tname.trim());
            return targs.length ? ss.makeGenericType(t, targs) : t
        };
        ss.getType = function ss$getType(typeName, asm) {
            return typeName ? ss._getType(typeName, asm || global) : null
        };
        ss.getDefaultValue = function ss$getDefaultValue(type) {
            if (typeof(type.getDefaultValue) === 'function') return type.getDefaultValue();
            else if (type === Boolean) return false;
            else if (type === Date) return new Date(0);
            else if (type === Number) return 0;
            return null
        };
        ss.createInstance = function ss$createInstance(type) {
            if (typeof(type.createInstance) === 'function') return type.createInstance();
            else if (type === Boolean) return false;
            else if (type === Date) return new Date(0);
            else if (type === Number) return 0;
            else if (type === String) return '';
            else return new type
        };
        var ss_IFormattable = function IFormattable$() {};
        ss_IFormattable.__typeName = 'ss.IFormattable';
        ss.IFormattable = ss_IFormattable;
        ss.initInterface(ss_IFormattable, ss, {
            format: null
        });
        var ss_IComparable = function IComparable$() {};
        ss_IComparable.__typeName = 'ss.IComparable';
        ss.IComparable = ss_IComparable;
        ss.initInterface(ss_IComparable, ss, {
            compareTo: null
        });
        var ss_IEquatable = function IEquatable$() {};
        ss_IEquatable.__typeName = 'ss.IEquatable';
        ss.IEquatable = ss_IEquatable;
        ss.initInterface(ss_IEquatable, ss, {
            equalsT: null
        });
        ss.isNullOrEmptyString = function ss$isNullOrEmptyString(s) {
            return !s || !s.length
        };
        if (!String.prototype.trim) {
            String.prototype.trim = function String$trim() {
                return ss.trimStartString(ss.trimEndString(this))
            }
        }
        ss.trimEndString = function ss$trimEndString(s, chars) {
            return s.replace(chars ? new RegExp('[' + String.fromCharCode.apply(null, chars) + ']+$') : /\s*$/, '')
        };
        ss.trimStartString = function ss$trimStartString(s, chars) {
            return s.replace(chars ? new RegExp('^[' + String.fromCharCode.apply(null, chars) + ']+') : /^\s*/, '')
        };
        ss.trimString = function ss$trimString(s, chars) {
            return ss.trimStartString(ss.trimEndString(s, chars), chars)
        };
        ss.arrayClone = function ss$arrayClone(arr) {
            if (arr.length === 1) {
                return [arr[0]]
            } else {
                return Array.apply(null, arr)
            }
        };
        if (!Array.prototype.map) {
            Array.prototype.map = function Array$map(callback, instance) {
                var length = this.length;
                var mapped = new Array(length);
                for (var i = 0; i < length; i++) {
                    if (i in this) {
                        mapped[i] = callback.call(instance, this[i], i, this)
                    }
                }
                return mapped
            }
        }
        if (!Array.prototype.some) {
            Array.prototype.some = function Array$some(callback, instance) {
                var length = this.length;
                for (var i = 0; i < length; i++) {
                    if (i in this && callback.call(instance, this[i], i, this)) {
                        return true
                    }
                }
                return false
            }
        }
        if (!Array.prototype.forEach) {
            Array.prototype.forEach = function(callback, thisArg) {
                var T, k;
                if (this == null) {
                    throw new TypeError(' this is null or not defined')
                }
                var O = Object(this);
                var len = O.length >>> 0;
                if (typeof callback !== "function") {
                    throw new TypeError(callback + ' is not a function')
                }
                if (arguments.length > 1) {
                    T = thisArg
                }
                k = 0;
                while (k < len) {
                    var kValue;
                    if (k in O) {
                        kValue = O[k];
                        callback.call(T, kValue, k, O)
                    }
                    k++
                }
            }
        }
        if (!Array.prototype.filter) {
            Array.prototype.filter = function(fun) {
                if (this === void 0 || this === null) {
                    throw new TypeError
                }
                var t = Object(this);
                var len = t.length >>> 0;
                if (typeof fun !== 'function') {
                    throw new TypeError
                }
                var res = [];
                var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
                for (var i = 0; i < len; i++) {
                    if (i in t) {
                        var val = t[i];
                        if (fun.call(thisArg, val, i, t)) {
                            res.push(val)
                        }
                    }
                }
                return res
            }
        }
        ss._delegateContains = function ss$_delegateContains(targets, object, method) {
            for (var i = 0; i < targets.length; i += 2) {
                if (targets[i] === object && targets[i + 1] === method) {
                    return true
                }
            }
            return false
        };
        ss._mkdel = function ss$_mkdel(targets) {
            var delegate = function() {
                if (targets.length == 2) {
                    return targets[1].apply(targets[0], arguments)
                } else {
                    var clone = ss.arrayClone(targets);
                    for (var i = 0; i < clone.length; i += 2) {
                        if (ss._delegateContains(targets, clone[i], clone[i + 1])) {
                            clone[i + 1].apply(clone[i], arguments)
                        }
                    }
                    return null
                }
            };
            delegate._targets = targets;
            return delegate
        };
        ss.mkdel = function ss$mkdel(object, method) {
            if (!object) {
                return method
            }
            return ss._mkdel([object, method])
        };
        ss.delegateCombine = function ss$delegateCombine(delegate1, delegate2) {
            if (!delegate1) {
                if (!delegate2._targets) {
                    return ss.mkdel(null, delegate2)
                }
                return delegate2
            }
            if (!delegate2) {
                if (!delegate1._targets) {
                    return ss.mkdel(null, delegate1)
                }
                return delegate1
            }
            var targets1 = delegate1._targets ? delegate1._targets : [null, delegate1];
            var targets2 = delegate2._targets ? delegate2._targets : [null, delegate2];
            return ss._mkdel(targets1.concat(targets2))
        };
        ss.delegateRemove = function ss$delegateRemove(delegate1, delegate2) {
            if (!delegate1 || (delegate1 === delegate2)) {
                return null
            }
            if (!delegate2) {
                return delegate1
            }
            var targets = delegate1._targets;
            var object = null;
            var method;
            if (delegate2._targets) {
                object = delegate2._targets[0];
                method = delegate2._targets[1]
            } else {
                method = delegate2
            }
            for (var i = 0; i < targets.length; i += 2) {
                if ((targets[i] === object) && (targets[i + 1] === method)) {
                    if (targets.length == 2) {
                        return null
                    }
                    var t = ss.arrayClone(targets);
                    t.splice(i, 2);
                    return ss._mkdel(t)
                }
            }
            return delegate1
        };
        ss.delegateEquals = function ss$delegateEquals(a, b) {
            if (a === b) return true;
            if (!a._targets && !b._targets) return false;
            var ta = a._targets || [null, a],
                tb = b._targets || [null, b];
            if (ta.length != tb.length) return false;
            for (var i = 0; i < ta.length; i++) {
                if (ta[i] !== tb[i]) return false
            }
            return true
        };
        var ss_Enum = function Enum$() {};
        ss_Enum.__typeName = 'ss.Enum';
        ss.Enum = ss_Enum;
        ss.initClass(ss_Enum, ss, {});
        ss_Enum.getValues = function Enum$getValues(enumType) {
            var parts = [];
            var values = enumType.prototype;
            for (var i in values) {
                if (values.hasOwnProperty(i)) parts.push(values[i])
            }
            return parts
        };
        var ss_IEnumerator = function IEnumerator$() {};
        ss_IEnumerator.__typeName = 'ss.IEnumerator';
        ss.IEnumerator = ss_IEnumerator;
        ss.initInterface(ss_IEnumerator, ss, {
            current: null,
            moveNext: null,
            reset: null
        }, [ss_IDisposable]);
        var ss_IEnumerable = function IEnumerable$() {};
        ss_IEnumerable.__typeName = 'ss.IEnumerable';
        ss.IEnumerable = ss_IEnumerable;
        ss.initInterface(ss_IEnumerable, ss, {
            getEnumerator: null
        });
        ss.getEnumerator = function ss$getEnumerator(obj) {
            return obj.getEnumerator ? obj.getEnumerator() : new ss_ArrayEnumerator(obj)
        };
        var ss_ICollection = function ICollection$() {};
        ss_ICollection.__typeName = 'ss.ICollection';
        ss.ICollection = ss_ICollection;
        ss.initInterface(ss_ICollection, ss, {
            get_count: null,
            add: null,
            clear: null,
            contains: null,
            remove: null
        });
        ss.count = function ss$count(obj) {
            return obj.get_count ? obj.get_count() : obj.length
        };
        ss.add = function ss$add(obj, item) {
            if (obj.add) obj.add(item);
            else if (ss.isArray(obj)) obj.push(item);
            else throw new ss_NotSupportedException
        };
        ss.clear = function ss$clear(obj) {
            if (obj.clear) obj.clear();
            else if (ss.isArray(obj)) obj.length = 0;
            else throw new ss_NotSupportedException
        };
        ss.remove = function ss$remove(obj, item) {
            if (obj.remove) return obj.remove(item);
            else if (ss.isArray(obj)) {
                var index = ss.indexOf(obj, item);
                if (index >= 0) {
                    obj.splice(index, 1);
                    return true
                }
                return false
            } else throw new ss_NotSupportedException
        };
        ss.contains = function ss$contains(obj, item) {
            if (obj.contains) return obj.contains(item);
            else return ss.indexOf(obj, item) >= 0
        };
        var ss_IEqualityComparer = function IEqualityComparer$() {};
        ss_IEqualityComparer.__typeName = 'ss.IEqualityComparer';
        ss.IEqualityComparer = ss_IEqualityComparer;
        ss.initInterface(ss_IEqualityComparer, ss, {
            areEqual: null,
            getObjectHashCode: null
        });
        var ss_IComparer = function IComparer$() {};
        ss_IComparer.__typeName = 'ss.IComparer';
        ss.IComparer = ss_IComparer;
        ss.initInterface(ss_IComparer, ss, {
            compare: null
        });
        ss.unbox = function ss$unbox(instance) {
            if (!ss.isValue(instance)) throw new ss_InvalidOperationException('Nullable object must have a value.');
            return instance
        };
        var ss_Nullable$1 = function Nullable$1$(T) {
            var $type = function() {};
            $type.isInstanceOfType = function(instance) {
                return ss.isInstanceOfType(instance, T)
            };
            ss.registerGenericClassInstance($type, ss_Nullable$1, [T], {}, function() {
                return null
            }, function() {
                return []
            });
            return $type
        };
        ss_Nullable$1.__typeName = 'ss.Nullable$1';
        ss.Nullable$1 = ss_Nullable$1;
        ss.initGenericClass(ss_Nullable$1, ss, 1);
        ss_Nullable$1.eq = function Nullable$eq(a, b) {
            return !ss.isValue(a) ? !ss.isValue(b) : (a === b)
        };
        ss_Nullable$1.ne = function Nullable$eq(a, b) {
            return !ss.isValue(a) ? ss.isValue(b) : (a !== b)
        };
        ss_Nullable$1.le = function Nullable$le(a, b) {
            return ss.isValue(a) && ss.isValue(b) && a <= b
        };
        ss_Nullable$1.ge = function Nullable$ge(a, b) {
            return ss.isValue(a) && ss.isValue(b) && a >= b
        };
        ss_Nullable$1.lt = function Nullable$lt(a, b) {
            return ss.isValue(a) && ss.isValue(b) && a < b
        };
        ss_Nullable$1.gt = function Nullable$gt(a, b) {
            return ss.isValue(a) && ss.isValue(b) && a > b
        };
        ss_Nullable$1.sub = function Nullable$sub(a, b) {
            return ss.isValue(a) && ss.isValue(b) ? a - b : null
        };
        ss_Nullable$1.add = function Nullable$add(a, b) {
            return ss.isValue(a) && ss.isValue(b) ? a + b : null
        };
        ss_Nullable$1.mod = function Nullable$mod(a, b) {
            return ss.isValue(a) && ss.isValue(b) ? a % b : null
        };
        ss_Nullable$1.div = function Nullable$divf(a, b) {
            return ss.isValue(a) && ss.isValue(b) ? a / b : null
        };
        ss_Nullable$1.mul = function Nullable$mul(a, b) {
            return ss.isValue(a) && ss.isValue(b) ? a * b : null
        };
        ss_Nullable$1.band = function Nullable$band(a, b) {
            return ss.isValue(a) && ss.isValue(b) ? a & b : null
        };
        ss_Nullable$1.bor = function Nullable$bor(a, b) {
            return ss.isValue(a) && ss.isValue(b) ? a | b : null
        };
        ss_Nullable$1.xor = function Nullable$xor(a, b) {
            return ss.isValue(a) && ss.isValue(b) ? a ^ b : null
        };
        ss_Nullable$1.shl = function Nullable$shl(a, b) {
            return ss.isValue(a) && ss.isValue(b) ? a << b : null
        };
        ss_Nullable$1.srs = function Nullable$srs(a, b) {
            return ss.isValue(a) && ss.isValue(b) ? a >> b : null
        };
        ss_Nullable$1.sru = function Nullable$sru(a, b) {
            return ss.isValue(a) && ss.isValue(b) ? a >>> b : null
        };
        ss_Nullable$1.and = function Nullable$and(a, b) {
            if (a === true && b === true) return true;
            else if (a === false || b === false) return false;
            else return null
        };
        ss_Nullable$1.or = function Nullable$or(a, b) {
            if (a === true || b === true) return true;
            else if (a === false && b === false) return false;
            else return null
        };
        ss_Nullable$1.not = function Nullable$not(a) {
            return ss.isValue(a) ? !a : null
        };
        ss_Nullable$1.neg = function Nullable$neg(a) {
            return ss.isValue(a) ? -a : null
        };
        ss_Nullable$1.pos = function Nullable$pos(a) {
            return ss.isValue(a) ? +a : null
        };
        ss_Nullable$1.cpl = function Nullable$cpl(a) {
            return ss.isValue(a) ? ~a : null
        };
        ss_Nullable$1.lift = function Nullable$lift() {
            for (var i = 0; i < arguments.length; i++) {
                if (!ss.isValue(arguments[i])) return null
            }
            return arguments[0].apply(null, Array.prototype.slice.call(arguments, 1))
        };
        var ss_IList = function IList$() {};
        ss_IList.__typeName = 'ss.IList';
        ss.IList = ss_IList;
        ss.initInterface(ss_IList, ss, {
            get_item: null,
            set_item: null,
            indexOf: null,
            insert: null,
            removeAt: null
        }, [ss_ICollection, ss_IEnumerable]);
        ss.getItem = function ss$getItem(obj, index) {
            return obj.get_item ? obj.get_item(index) : obj[index]
        };
        ss.setItem = function ss$setItem(obj, index, value) {
            obj.set_item ? obj.set_item(index, value) : (obj[index] = value)
        };
        ss.indexOf = function ss$indexOf(obj, item) {
            var itemType = typeof(item);
            if ((!item || typeof(item.equals) !== 'function') && typeof(obj.indexOf) === 'function') {
                return obj.indexOf(item)
            } else if (ss.isArrayOrTypedArray(obj)) {
                for (var i = 0; i < obj.length; i++) {
                    if (ss.staticEquals(obj[i], item)) {
                        return i
                    }
                }
                return -1
            } else return obj.indexOf(item)
        };
        ss.insert = function ss$insert(obj, index, item) {
            if (obj.insert) obj.insert(index, item);
            else if (ss.isArray(obj)) obj.splice(index, 0, item);
            else throw new ss_NotSupportedException
        };
        ss.removeAt = function ss$removeAt(obj, index) {
            if (obj.removeAt) obj.removeAt(index);
            else if (ss.isArray(obj)) obj.splice(index, 1);
            else throw new ss_NotSupportedException
        };
        var ss_IDictionary = function IDictionary$() {};
        ss_IDictionary.__typeName = 'ss.IDictionary';
        ss.IDictionary = ss_IDictionary;
        ss.initInterface(ss_IDictionary, ss, {
            get_item: null,
            set_item: null,
            get_keys: null,
            get_values: null,
            containsKey: null,
            add: null,
            remove: null,
            tryGetValue: null
        }, [ss_IEnumerable]);
        var ss_Int32 = function Int32$() {};
        ss_Int32.__typeName = 'ss.Int32';
        ss.Int32 = ss_Int32;
        ss.initClass(ss_Int32, ss, {}, Object, [ss_IEquatable, ss_IComparable, ss_IFormattable]);
        ss_Int32.__class = false;
        ss_Int32.isInstanceOfType = function Int32$isInstanceOfType(instance) {
            return typeof(instance) === 'number' && isFinite(instance) && Math.round(instance, 0) == instance
        };
        ss_Int32.getDefaultValue = ss_Int32.createInstance = function Int32$getDefaultValue() {
            return 0
        };
        ss_Int32.div = function Int32$div(a, b) {
            if (!ss.isValue(a) || !ss.isValue(b)) return null;
            if (b === 0) throw new ss_DivideByZeroException;
            return ss_Int32.trunc(a / b)
        };
        ss_Int32.trunc = function Int32$trunc(n) {
            return ss.isValue(n) ? (n > 0 ? Math.floor(n) : Math.ceil(n)) : null
        };
        ss_Int32.tryParse = function Int32$tryParse(s, result, min, max) {
            result.$ = 0;
            if (!/^[+-]?[0-9]+$/.test(s)) return 0;
            var n = parseInt(s, 10);
            if (n < min || n > max) return false;
            result.$ = n;
            return true
        };
        var ss_JsDate = function JsDate$() {};
        ss_JsDate.__typeName = 'ss.JsDate';
        ss.JsDate = ss_JsDate;
        ss.initClass(ss_JsDate, ss, {}, Object, [ss_IEquatable, ss_IComparable]);
        ss_JsDate.createInstance = function JsDate$createInstance() {
            return new Date
        };
        ss_JsDate.isInstanceOfType = function JsDate$isInstanceOfType(instance) {
            return instance instanceof Date
        };
        var ss_ArrayEnumerator = function ArrayEnumerator$(array) {
            this._array = array;
            this._index = -1
        };
        ss_ArrayEnumerator.__typeName = 'ss.ArrayEnumerator';
        ss.ArrayEnumerator = ss_ArrayEnumerator;
        ss.initClass(ss_ArrayEnumerator, ss, {
            moveNext: function ArrayEnumerator$moveNext() {
                this._index++;
                return (this._index < this._array.length)
            },
            reset: function ArrayEnumerator$reset() {
                this._index = -1
            },
            current: function ArrayEnumerator$current() {
                if (this._index < 0 || this._index >= this._array.length) throw 'Invalid operation';
                return this._array[this._index]
            },
            dispose: function ArrayEnumerator$dispose() {}
        }, null, [ss_IEnumerator, ss_IDisposable]);
        var ss_ObjectEnumerator = function ObjectEnumerator$(o) {
            this._keys = Object.keys(o);
            this._index = -1;
            this._object = o
        };
        ss_ObjectEnumerator.__typeName = 'ss.ObjectEnumerator';
        ss.ObjectEnumerator = ss_ObjectEnumerator;
        ss.initClass(ss_ObjectEnumerator, ss, {
            moveNext: function ObjectEnumerator$moveNext() {
                this._index++;
                return (this._index < this._keys.length)
            },
            reset: function ObjectEnumerator$reset() {
                this._index = -1
            },
            current: function ObjectEnumerator$current() {
                if (this._index < 0 || this._index >= this._keys.length) throw new ss_InvalidOperationException('Invalid operation');
                var k = this._keys[this._index];
                return {
                    key: k,
                    value: this._object[k]
                }
            },
            dispose: function ObjectEnumerator$dispose() {}
        }, null, [ss_IEnumerator, ss_IDisposable]);
        var ss_EqualityComparer = function EqualityComparer$() {};
        ss_EqualityComparer.__typeName = 'ss.EqualityComparer';
        ss.EqualityComparer = ss_EqualityComparer;
        ss.initClass(ss_EqualityComparer, ss, {
            areEqual: function EqualityComparer$areEqual(x, y) {
                return ss.staticEquals(x, y)
            },
            getObjectHashCode: function EqualityComparer$getObjectHashCode(obj) {
                return ss.isValue(obj) ? ss.getHashCode(obj) : 0
            }
        }, null, [ss_IEqualityComparer]);
        ss_EqualityComparer.def = new ss_EqualityComparer;
        var ss_Comparer = function Comparer$(f) {
            this.f = f
        };
        ss_Comparer.__typeName = 'ss.Comparer';
        ss.Comparer = ss_Comparer;
        ss.initClass(ss_Comparer, ss, {
            compare: function Comparer$compare(x, y) {
                return this.f(x, y)
            }
        }, null, [ss_IComparer]);
        ss_Comparer.def = new ss_Comparer(function Comparer$defaultCompare(a, b) {
            if (!ss.isValue(a)) return !ss.isValue(b) ? 0 : -1;
            else if (!ss.isValue(b)) return 1;
            else return ss.compare(a, b)
        });
        var ss_IDisposable = function IDisposable$() {};
        ss_IDisposable.__typeName = 'ss.IDisposable';
        ss.IDisposable = ss_IDisposable;
        ss.initInterface(ss_IDisposable, ss, {
            dispose: null
        });
        var ss_StringBuilder = function StringBuilder$(s) {
            this._parts = (ss.isValue(s) && s != '') ? [s] : [];
            this.length = ss.isValue(s) ? s.length : 0
        };
        ss_StringBuilder.__typeName = 'ss.StringBuilder';
        ss.StringBuilder = ss_StringBuilder;
        ss.initClass(ss_StringBuilder, ss, {
            append: function StringBuilder$append(o) {
                if (ss.isValue(o)) {
                    var s = o.toString();
                    ss.add(this._parts, s);
                    this.length += s.length
                }
                return this
            },
            appendChar: function StringBuilder$appendChar(c) {
                return this.append(String.fromCharCode(c))
            },
            appendLine: function StringBuilder$appendLine(s) {
                this.append(s);
                this.append('\r\n');
                return this
            },
            appendLineChar: function StringBuilder$appendLineChar(c) {
                return this.appendLine(String.fromCharCode(c))
            },
            clear: function StringBuilder$clear() {
                this._parts = [];
                this.length = 0
            },
            toString: function StringBuilder$toString() {
                return this._parts.join('')
            }
        });
        var ss_EventArgs = function EventArgs$() {};
        ss_EventArgs.__typeName = 'ss.EventArgs';
        ss.EventArgs = ss_EventArgs;
        ss.initClass(ss_EventArgs, ss, {});
        ss_EventArgs.Empty = new ss_EventArgs;
        var ss_Exception = function Exception$(message, innerException) {
            this._message = message || 'An error occurred.';
            this._innerException = innerException || null;
            this._error = new Error
        };
        ss_Exception.__typeName = 'ss.Exception';
        ss.Exception = ss_Exception;
        ss.initClass(ss_Exception, ss, {
            get_message: function Exception$get_message() {
                return this._message
            },
            get_innerException: function Exception$get_innerException() {
                return this._innerException
            },
            get_stack: function Exception$get_stack() {
                return this._error.stack
            },
            toString: function Exception$toString() {
                var message = this._message;
                var exception = this;
                if (ss.isNullOrEmptyString(message)) {
                    if (ss.isValue(ss.getInstanceType(exception)) && ss.isValue(ss.getTypeFullName(ss.getInstanceType(exception)))) {
                        message = ss.getTypeFullName(ss.getInstanceType(exception))
                    } else {
                        message = '[object Exception]'
                    }
                }
                return message
            }
        });
        ss_Exception.wrap = function Exception$wrap(o) {
            if (ss.isInstanceOfType(o, ss_Exception)) {
                return o
            } else if (o instanceof TypeError) {
                return new ss_NullReferenceException(o.message, new ss_JsErrorException(o))
            } else if (o instanceof RangeError) {
                return new ss_ArgumentOutOfRangeException(null, o.message, new ss_JsErrorException(o))
            } else if (o instanceof Error) {
                return new ss_JsErrorException(o)
            } else {
                return new ss_Exception(o.toString())
            }
        };
        var ss_NotImplementedException = function NotImplementedException$(message, innerException) {
            ss_Exception.call(this, message || 'The method or operation is not implemented.', innerException)
        };
        ss_NotImplementedException.__typeName = 'ss.NotImplementedException';
        ss.NotImplementedException = ss_NotImplementedException;
        ss.initClass(ss_NotImplementedException, ss, {}, ss_Exception);
        var ss_NotSupportedException = function NotSupportedException$(message, innerException) {
            ss_Exception.call(this, message || 'Specified method is not supported.', innerException)
        };
        ss_NotSupportedException.__typeName = 'ss.NotSupportedException';
        ss.NotSupportedException = ss_NotSupportedException;
        ss.initClass(ss_NotSupportedException, ss, {}, ss_Exception);
        var ss_AggregateException = function AggregateException$(message, innerExceptions) {
            this.innerExceptions = ss.isValue(innerExceptions) ? ss.arrayFromEnumerable(innerExceptions) : [];
            ss_Exception.call(this, message || 'One or more errors occurred.', this.innerExceptions.length ? this.innerExceptions[0] : null)
        };
        ss_AggregateException.__typeName = 'ss.AggregateException';
        ss.AggregateException = ss_AggregateException;
        ss.initClass(ss_AggregateException, ss, {
            flatten: function AggregateException$flatten() {
                var inner = [];
                for (var i = 0; i < this.innerExceptions.length; i++) {
                    var e = this.innerExceptions[i];
                    if (ss.isInstanceOfType(e, ss_AggregateException)) {
                        inner.push.apply(inner, e.flatten().innerExceptions)
                    } else {
                        inner.push(e)
                    }
                }
                return new ss_AggregateException(this._message, inner)
            }
        }, ss_Exception);
        var ss_PromiseException = function PromiseException(args, message, innerException) {
            ss_Exception.call(this, message || (args.length && args[0] ? args[0].toString() : 'An error occurred'), innerException);
            this.arguments = ss.arrayClone(args)
        };
        ss_PromiseException.__typeName = 'ss.PromiseException';
        ss.PromiseException = ss_PromiseException;
        ss.initClass(ss_PromiseException, ss, {
            get_arguments: function PromiseException$get_arguments() {
                return this._arguments
            }
        }, ss_Exception);
        var ss_JsErrorException = function JsErrorException$(error, message, innerException) {
            ss_Exception.call(this, message || error.message, innerException);
            this.error = error
        };
        ss_JsErrorException.__typeName = 'ss.JsErrorException';
        ss.JsErrorException = ss_JsErrorException;
        ss.initClass(ss_JsErrorException, ss, {
            get_stack: function Exception$get_stack() {
                return this.error.stack
            }
        }, ss_Exception);
        var ss_ArgumentException = function ArgumentException$(message, paramName, innerException) {
            ss_Exception.call(this, message || 'Value does not fall within the expected range.', innerException);
            this.paramName = paramName || null
        };
        ss_ArgumentException.__typeName = 'ss.ArgumentException';
        ss.ArgumentException = ss_ArgumentException;
        ss.initClass(ss_ArgumentException, ss, {}, ss_Exception);
        var ss_ArgumentNullException = function ArgumentNullException$(paramName, message, innerException) {
            if (!message) {
                message = 'Value cannot be null.';
                if (paramName) message += '\nParameter name: ' + paramName
            }
            ss_ArgumentException.call(this, message, paramName, innerException)
        };
        ss_ArgumentNullException.__typeName = 'ss.ArgumentNullException';
        ss.ArgumentNullException = ss_ArgumentNullException;
        ss.initClass(ss_ArgumentNullException, ss, {}, ss_ArgumentException);
        var ss_ArgumentOutOfRangeException = function ArgumentOutOfRangeException$(paramName, message, innerException, actualValue) {
            if (!message) {
                message = 'Value is out of range.';
                if (paramName) message += '\nParameter name: ' + paramName
            }
            ss_ArgumentException.call(this, message, paramName, innerException);
            this.actualValue = actualValue || null
        };
        ss_ArgumentOutOfRangeException.__typeName = 'ss.ArgumentOutOfRangeException';
        ss.ArgumentOutOfRangeException = ss_ArgumentOutOfRangeException;
        ss.initClass(ss_ArgumentOutOfRangeException, ss, {}, ss_ArgumentException);
        var ss_FormatException = function FormatException$(message, innerException) {
            ss_Exception.call(this, message || 'Invalid format.', innerException)
        };
        ss_FormatException.__typeName = 'ss.FormatException';
        ss.FormatException = ss_FormatException;
        ss.initClass(ss_FormatException, ss, {}, ss_Exception);
        var ss_DivideByZeroException = function DivideByZeroException$(message, innerException) {
            ss_Exception.call(this, message || 'Division by 0.', innerException)
        };
        ss_DivideByZeroException.__typeName = 'ss.DivideByZeroException';
        ss.DivideByZeroException = ss_DivideByZeroException;
        ss.initClass(ss_DivideByZeroException, ss, {}, ss_Exception);
        var ss_InvalidCastException = function InvalidCastException$(message, innerException) {
            ss_Exception.call(this, message || 'The cast is not valid.', innerException)
        };
        ss_InvalidCastException.__typeName = 'ss.InvalidCastException';
        ss.InvalidCastException = ss_InvalidCastException;
        ss.initClass(ss_InvalidCastException, ss, {}, ss_Exception);
        var ss_InvalidOperationException = function InvalidOperationException$(message, innerException) {
            ss_Exception.call(this, message || 'Operation is not valid due to the current state of the object.', innerException)
        };
        ss_InvalidOperationException.__typeName = 'ss.InvalidOperationException';
        ss.InvalidOperationException = ss_InvalidOperationException;
        ss.initClass(ss_InvalidOperationException, ss, {}, ss_Exception);
        var ss_NullReferenceException = function NullReferenceException$(message, innerException) {
            ss_Exception.call(this, message || 'Object is null.', innerException)
        };
        ss_NullReferenceException.__typeName = 'ss.NullReferenceException';
        ss.NullReferenceException = ss_NullReferenceException;
        ss.initClass(ss_NullReferenceException, ss, {}, ss_Exception);
        var ss_KeyNotFoundException = function KeyNotFoundException$(message, innerException) {
            ss_Exception.call(this, message || 'Key not found.', innerException)
        };
        ss_KeyNotFoundException.__typeName = 'ss.KeyNotFoundException';
        ss.KeyNotFoundException = ss_KeyNotFoundException;
        ss.initClass(ss_KeyNotFoundException, ss, {}, ss_Exception);
        var ss_AmbiguousMatchException = function AmbiguousMatchException$(message, innerException) {
            ss_Exception.call(this, message || 'Ambiguous match.', innerException)
        };
        ss_AmbiguousMatchException.__typeName = 'ss.AmbiguousMatchException';
        ss.AmbiguousMatchException = ss_AmbiguousMatchException;
        ss.initClass(ss_AmbiguousMatchException, ss, {}, ss_Exception);
        var ss_IteratorBlockEnumerable = function IteratorBlockEnumerable$(getEnumerator, $this) {
            this._getEnumerator = getEnumerator;
            this._this = $this
        };
        ss_IteratorBlockEnumerable.__typeName = 'ss.IteratorBlockEnumerable';
        ss.IteratorBlockEnumerable = ss_IteratorBlockEnumerable;
        ss.initClass(ss_IteratorBlockEnumerable, ss, {
            getEnumerator: function IteratorBlockEnumerable$getEnumerator() {
                return this._getEnumerator.call(this._this)
            }
        }, null, [ss_IEnumerable]);
        var ss_IteratorBlockEnumerator = function IteratorBlockEnumerator$(moveNext, getCurrent, dispose, $this) {
            this._moveNext = moveNext;
            this._getCurrent = getCurrent;
            this._dispose = dispose;
            this._this = $this
        };
        ss_IteratorBlockEnumerator.__typeName = 'ss.IteratorBlockEnumerator';
        ss.IteratorBlockEnumerator = ss_IteratorBlockEnumerator;
        ss.initClass(ss_IteratorBlockEnumerator, ss, {
            moveNext: function IteratorBlockEnumerator$moveNext() {
                try {
                    return this._moveNext.call(this._this)
                } catch (ex) {
                    if (this._dispose) this._dispose.call(this._this);
                    throw ex
                }
            },
            current: function IteratorBlockEnumerator$current() {
                return this._getCurrent.call(this._this)
            },
            reset: function IteratorBlockEnumerator$reset() {
                throw new ss_NotSupportedException('Reset is not supported.')
            },
            dispose: function IteratorBlockEnumerator$dispose() {
                if (this._dispose) this._dispose.call(this._this)
            }
        }, null, [ss_IEnumerator, ss_IDisposable]);
        var ss_Lazy = function Lazy$(valueFactory) {
            this._valueFactory = valueFactory;
            this.isValueCreated = false
        };
        ss_Lazy.__typeName